
Girl kaitlyn "Kaitlyn"
 with
  name 'kaitlyn',
  narrative_voice 1,
  wearing_top yellow_shirt,
  wearing_pants skinny_jeans,
  bra k_bra,
  panties k_panties,
  is "I'm",
  description [;
   if ((self.wearing_top ~= nothing) && (self.wearing_pants ~= nothing)) "I'm rockin' a cute, little ", (name)self.wearing_top, " and ", (name)self.wearing_pants, ".";
   if ((self.wearing_top == nothing) && (self.wearing_pants ~= nothing)) "I'm in bra and ", (name)self.wearing_pants, ".";
   if ((self.wearing_top ~= nothing) && (self.wearing_pants == nothing)) "I'm in ", (name)self.wearing_top, " and panties.";
   if ((self.wearing_top == nothing) && (self.wearing_pants == nothing)) "I'm looking pretty good in my bra and panties.";
  ],
  before [;
   Give:
    if (OnPhone(self)) "(Kaitlyn Before Give) It'd be hard to give something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
  ],
  after [;
   Give:
    if (OnPhone(self)) "(Kaitlyn After Give) It'd be hard to give something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
  ],
 has concealed proper transparent;

Girl britney "Britney" room_403
 with
  name 'Britney' 'Brit',
  wearing_top blue_shirt,
  wearing_pants yoga_pants,
  bra b_bra,
  panties b_panties,
  is "Britney's",
  destination_floor,
  destination_room,
  is_following false,
  contact_icon contact_britney,
  initial [;
   StopDaemon(self);
   if (britney.is_following) rtrue;
   "Britney, my BFF, is here.";
  ],
  description [ o n i;
   if (OnPhone(britney)) "Britney has a nice voice on the phone.";
   n = 0;
   objectloop(o ofclass Britney_Object) {
    if ((o in britney) && (o hasnt worn)) n++;
   }
   if (n > 0) {
    i = 0;
    objectloop(o ofclass Britney_Object) {
     if ((o in britney) && (o hasnt worn)) {
      switch (++i) {
       1: print "Britney's carrying ";
       default: if (i < n) print ", ";
       else print " and ";
      };
      if (o ofclass Ownable_Object) {
       if (o.owner == kaitlyn) print "my";
       else print "her";
      }
      else print (string)noun.article;
      print " ", (name)o;
     }
    }
   } else print "Britney's a brunette, she's slim and athletic like me";
   print ", and she's wearing a ";
   if ((self.wearing_top ~= nothing) && (self.wearing_pants ~= nothing)) print_ret (name)self.wearing_top, " and ", (name)self.wearing_pants, ".";
   if ((self.wearing_top == nothing) && (self.wearing_pants ~= nothing)) "bra and ", (name)self.wearing_pants, ".";
   if ((self.wearing_top ~= nothing) && (self.wearing_pants == nothing)) print_ret (name)self.wearing_top, " and panties.";
   if ((self.wearing_top == nothing) && (self.wearing_pants == nothing)) "bra and panties.";
  ],
  before [;
   Give:
    if (OnPhone(self)) "It'd be hard to give something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
   Show:
    if (OnPhone(self)) "It's hard to show something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
  ],
  life [ o;
   Give:
    ! Giving to Britney...
    if (noun ofclass Britney_Object) {
     move noun to britney;
     print_ret (BritneysVoice)"Thanks.";
    }
    print_ret (BritneysVoice)"No thanks.";
   Show:
    ! Showing to Britney...
    ! if (call_person == self) "It's hard to show something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
    if (noun == smartphone) {
     if (smartphone.mode == MODE_PHOTOS) {
      ! Find current photo
      objectloop(o ofclass Photograph) {
       if (o.number == current_photo) {
        switch (o.subject) {
         fluffy: print_ret (BritneysVoice)"Omigod, I love Fluffy, he's soo cute!";
         igor: print_ret (BritneysVoice)"Isn't that the guy from the front desk?";
         britney:
          print (BritneysVoice)"Oh, that's a pretty good photo of me";
          if ((o.wearing_top == nothing) || (o.wearing_pants == nothing)) print_ret (BritneysVoice)", but make sure you don't show that to anyone else!";
          print_ret (BritneysVoice)".";
         kaitlyn:
          print_ret (BritneysVoice)"That's an awesome photo of you!";
         computer:
          if (FlagOff(PLAYER_KNOWS_MESSAGE)) print_ret (BritneysVoice)"Hey, Igor's Ukrainian, maybe he'd know what that means.";
          print_ret (BritneysVoice)"We need to go there and find Fluffy!";
         default: print_ret (BritneysVoice)"That's a nice photo.";
        }
        break;
       }
      }
     }
     if (smartphone.mode == MODE_MESSAGES) {
      if (FlagOff(BRITNEY_KNOWS_ABOUT_FLUFFY)) {
       SetFlag(BRITNEY_KNOWS_ABOUT_FLUFFY);
       print_ret (BritneysVoice)"Omigod, someone took Fluffy? What are we gonna do to get him back?";
      } print_ret (BritneysVoice)"I don't what else I can tell you to help.";
    }
    print_ret (BritneysVoice)"Is that supposed to be interesting?";
   }
   Tell:
    if (second == 'fluffy') {
     if (FlagOn(PLAYER_KNOWS_ABOUT_FLUFFY)) {
      if (FlagOff(BRITNEY_KNOWS_ABOUT_FLUFFY)) {
       SetFlag(BRITNEY_KNOWS_ABOUT_FLUFFY);
       print_ret (BritneysVoice)"Omigod, that's awful, Katie!!!";
      }
      else print_ret (BritneysVoice)"Let me know if there's anything I can to to help!";
     }
     else print_ret (BritneysVoice)"OMG, Kaitlyn, I know you love your dog!";
    }
    "She doesn't seem interested.";
   Ask:
    if (second == 'fluffy') {
     if (FlagOff(BRITNEY_KNOWS_ABOUT_FLUFFY)) print_ret (BritneysVoice)"I love that little dog, Katey!";
     else print_ret (BritneysVoice)"I don't know what else to suggest";
    }
    if (second == 'fluffy') {
     if (FlagOff(BRITNEY_KNOWS_ABOUT_FLUFFY)) print_ret (BritneysVoice)"I love that little dog, Katey!";
     else print_ret (BritneysVoice)"I don't know what else to suggest";
    }
    "Britney didn't know anything about that.";
   Kiss:
    print_ret (BritneysVoice)"I love you, Kaitlyn, but not that way.";
  ],
  orders [;
   Give:
    if (OnPhone(britney)) print_ret (BritneysVoice)"Remind me when I see you again.";
    if (noun notin britney) print_ret (BritneysVoice)"But, Kaitlyn, I don't have that.";
    move noun to player;
    print_ret (BritneysVoice)"ok ", (name)noun;
   Drop:
    if ((noun ofclass Britney_Object) && (noun in britney)) {
     if (OnPhone(britney)) move noun to call_room;
     else move noun to location;
     print_ret (BritneysVoice)"Ok.";
    }
   Take:
    if ((noun ofclass Britney_Object) && (noun notin britney)) {
     if (OnPhone(britney)) {
      if (noun in call_room) {
       move noun to britney;
       print_ret (BritneysVoice)"Ok.";
      }
     }
     else {
      if (noun in parent(britney)) {
       move noun to britney;
       print_ret (BritneysVoice)"Ok.";
      }
     }
    }
   Look:
    ! ToDo: Add more colour?
    if (OnPhone(britney)) print_ret (BritneysVoice)"I don't see much happening.";
    else print_ret (BritneysVoice)"Yes, I see you, you look nice.";
   Disrobe:
    if (~~(location ofclass Hotel_Room)) print_ret (BritneysVoice)"I can't undress in public!";
    if (noun ofclass Top) {
     DisrobeTop(actor, noun);
     rtrue;
    }
    if (noun ofclass Pants) {
     DisrobePants(actor, noun);
     rtrue;
    }
   Wear:
    if (noun ofclass Top) {
     WearTop(actor, noun);
     rtrue;
    }
    if (noun ofclass Pants) {
     WearPants(actor, noun);
     rtrue;
    }
   ComeHere:
    if (OnPhone(britney)) {
     if ((self.wearing_top == nothing) || (self.wearing_pants == nothing)) print_ret (BritneysVoice)"I'm not walking out of here dressed like this!";
     if (player in basement or roof) print_ret (BritneysVoice)"That's for authorized personnel only.";
     if (player in elevator) print_ret (BritneysVoice)"Let's meet somewhere other than the elevator.";
     !if (player in room1 or room2 or room3 or room4 or room5 or room6 or room7) "~Ok, stay there and I'll be there soon.~";
     if (location ofclass Hall or Hotel_Room) self.destination_floor = location.floor_number;
     else self.destination_floor = 1;
     self.destination_room = location;
     !if (player in street) self.destination_on_route = lobby;
     !if (player in hall or room1 or room2 or room3 or room4 or room5 or room6 or room7) self.destination_on_route = hall;
     StartDaemon(self);
     EndCall(britney);
     print_ret (BritneysVoice)"Ok, I'll be there as soon as I can.";
    }
   ! Not going to implement GoTo
   FollowMe:
    britney.is_following = true;
    print_ret (BritneysVoice)"Sure, I'll come with you.";
   StayHere:
    britney.is_following = false;
    print_ret (BritneysVoice)"Ok, I'll stay here.";
   NotUnderstood: print_ret (BritneysVoice)"I don't understand.";
  ],
  daemon [ to_room;
   to_room = nothing;
   switch (parent(self)) {
    room_501, room_502, room_503, room_504, room_505, room_506, room_507:
     to_room = fifth_floor;
    fifth_floor:
     if (self.destination_floor < 5) to_room = fourth_floor;
     else to_room = self.destination_room;
    room_401, room_402, room_403, room_404, room_405, room_406, room_407:
     to_room = fourth_floor;
    fourth_floor:
     if (self.destination_floor < 4) to_room = third_floor;
     else {
      if (self.destination_floor > 4) to_room = fifth_floor;
      else to_room = self.destination_room;
     }
    room_301, room_302, room_303, room_304, room_305, room_306, room_307:
     to_room = third_floor;
    third_floor:
     if (self.destination_floor < 3) to_room = second_floor;
     else {
      if (self.destination_floor > 3) to_room = fourth_floor;
      else to_room = self.destination_room;
     }
    room_201, room_202, room_203, room_204, room_205, room_206, room_207:
     to_room = second_floor;
    second_floor:
     if (self.destination_floor < 2) to_room = elevator_vestibule;
     else {
      if (self.destination_floor > 2) to_room = third_floor;
      else to_room = self.destination_room;
     }
    elevator_vestibule:
     if (self.destination_floor > 1) {
      to_room = second_floor;
     } else {
      if (self.destination_room == nothing) to_room = random(lobby, gift_shop, casino, restaurant, nightclub);
      else {
       if (self.destination_room == street) to_room = lobby;
       else to_room = self.destination_room;
      }
     }
    lobby:
     if (self.destination_room == nothing) to_room = random(gift_shop, elevator_vestibule);
     else {
      if (self.destination_room == street) to_room = street;
      else to_room = elevator_vestibule;
     }
    gift_shop:
     if (self.destination_room == nothing) to_room = random(lobby, elevator_vestibule, casino);
     else to_room = elevator_vestibule;
    casino:
     if (self.destination_room == nothing) to_room = random(gift_shop, elevator_vestibule, restaurant);
     else to_room = elevator_vestibule;
    restaurant:
     if (self.destination_room == nothing) to_room = random(casino, elevator_vestibule, nightclub);
     else to_room = elevator_vestibule;
    nightclub:
     if (self.destination_room == nothing) to_room = random(restaurant, elevator_vestibule);
     else to_room = elevator_vestibule;
    street: to_room = lobby;
    default: print "Britney doesn't even know where she is!^";
   }
   if (to_room ~= nothing) {
    move self to to_room;
    if (player in to_room) {
     self.destination_room = to_room;
     if (location ofclass Hotel_Room) print "I heard a knock on the door and let Britney in.";
     else print "^Just then, Britney arrived.";
    }
    if (parent(self) == self.destination_room) {
     StopDaemon(self);
    }
   }
  ];

Guy igor "Igor" lobby
 with
  name 'Igor' 'man',
  description [;
   if (OnPhone(self)) "Over the phone, his accent seems even stronger.";
   "Igor's wearing a hotel uniform.";
  ],
  before [;
   Give:
    if (OnPhone(self)) "It'd be hard to give ", (name)self, " something when I'm on the phone with ", (PronounAcc)self, "!";
   Show:
    if (OnPhone(self)) "It's hard to show something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
  ],
  life [ o;
   Give:
    ! Giving to Igor...
    if (noun == master_key) {
     move noun to igor;
     print_ret (IgorsVoice)"Thanks for getting that back to me!";
    }
    print_ret (IgorsVoice)"No, thanks, I don't need that.";
   Show:
    ! Showing to Igor...
    if (noun == smartphone) {
     if (smartphone.mode == MODE_PHOTOS) {
      ! Find current photo
      objectloop(o ofclass Photograph) {
       if (o.number == current_photo) {
        switch (o.subject) {
         fluffy: print_ret (IgorsVoice)"Oh, that's your dog, he's really cute!";
         igor: print_ret (IgorsVoice)"Hey, that's me!";
         britney: print_ret (IgorsVoice)"Yes, that's your friend, how could I forget her?";
         kaitlyn:
          print (IgorsVoice)"That's an awesome photo of you";
          if ((o.wearing_top == nothing) || (o.wearing_pants == nothing)) print_ret (IgorsVoice)", but you shouldn't be showing that to me.";
          else print_ret (IgorsVoice)".";
         computer:
          SetFlag(PLAYER_KNOWS_MESSAGE);
          print_ret (IgorsVoice)"Oh, that's Russian, it means, ~Vlad, the dog's in the basement.~";
         default: print_ret (IgorsVoice)"That's a nice photo.";
        }
        break;
       }
      }
     }
     if (smartphone.mode == MODE_MESSAGES) {
      if (FlagOff(IGOR_KNOWS_ABOUT_FLUFFY)) {
       SetFlag(IGOR_KNOWS_ABOUT_FLUFFY);
       print_ret (IgorsVoice)"I'm so sorry someone took your dog! If there's anything I can do to help, let me know, I'm always here.";
      }
      print_ret (IgorsVoice)"I don't know what else I can tell you to help.";
     }
     print_ret (IgorsVoice)"Is that supposed to be interesting?";
    }
   Ask:
    if (second == 'britney') print_ret (IgorsVoice)"Not sure, miss, did you try her room?";
    if (second == 'fluffy') {
     if (FlagOff(IGOR_KNOWS_ABOUT_FLUFFY)) print_ret (IgorsVoice)"I think your dog is very cute, good luck in the dog show!";
     print_ret (IgorsVoice)"Sorry, I don't know anything else about your dog.";
    }
    if (second == 'russians' or 'vlad' or 'vladimir') {
     if (FlagOff(IGOR_KNOWS_ABOUT_FLUFFY)) print_ret (IgorsVoice)"Just between you and me, I hate Russians after what they did to my country.";
     if (FlagOff(PLAYER_KNOWS_ABOUT_202)) {
      SetFlag(PLAYER_KNOWS_ABOUT_202);
      print_ret (IgorsVoice)"I could get in trouble for telling you this, but there's two big Russian guys named Vladimir and Sergei in room 202.";
     }
     print_ret (IgorsVoice)"There's nothing else I can tell you about the Russians.";
    }
    print_ret (IgorsVoice)"I don't really know about that.";
   Tell:
    if (second == 'fluffy') {
     if (FlagOn(PLAYER_KNOWS_ABOUT_FLUFFY)) {
      if (FlagOff(IGOR_KNOWS_ABOUT_FLUFFY)) {
       SetFlag(IGOR_KNOWS_ABOUT_FLUFFY);
       print_ret (IgorsVoice)"Oh no, someone took your dog? If there's anything I can do to help, let me know.";
      } print_ret (IgorsVoice)"So no more news, then?";
     } print_ret (IgorsVoice)"Well, good luck with the dog show!";
    }
    if (second == 'russians' or 'vlad' or 'flashback') {
     if (FlagOn(PLAYER_KNOWS_ABOUT_RUSSIANS) && FlagOn(IGOR_KNOWS_ABOUT_FLUFFY)) {
      print_ret (IgorsVoice)"Yeah, there's a couple Russian guys that checked in yesterday.";
     }
    }
    if (second == 'message' or 'computer') {
     if (FlagOn(PLAYER_HAS_SEEN_MESSAGE)) {
      if (FlagOff(PLAYER_KNOWS_MESSAGE)) {
       ! You can't adequately describe the message unless you're looking at the computer
       if (location == room_202) {
        SetFlag(PLAYER_KNOWS_MESSAGE);
        "It takes a while to describe it to Igor, but eventually he figures out that it means Fluffy's in the basement.";
       }
       print_ret (IgorsVoice)"That sounds like it's in Russian.";
      }
      print_ret "Let's not stand around talking all day!";
     }
     ! (name) - no, nothing - no, (string) - no
     ! Can't figure this out, so brute force
     if (second == 'message') "What message?";
     else "What computer?";
    }
    "He doesn't seem interested.";
  ],
  orders [;
   ComeHere:
    if (OnPhone(igor)) print_ret (IgorsVoice)"I need to stay here, sorry.";
   FollowMe:
    if (~~(OnPhone(igor))) print_ret (IgorsVoice)"I need to stay here, sorry.";
   StayHere:
    print_ret (IgorsVoice)"Of course, I have to stay here.";
   Give:
    !if (call_person == self) "It'd be hard for ", (name)self, " to give you anything when I'm on the phone with ", (PronounAcc)self, "!";
    if ((noun == master_key) && (noun in self) && (second == player)) {
     if (FlagOff(IGOR_KNOWS_ABOUT_FLUFFY)) print_ret (IgorsVoice)"Sorry, I'd get in big trouble if I did that.";
     move noun to second;
     print_ret (IgorsVoice)"Well, you really need to get your dog back, so here you go.";
    }
   Take:
    if (noun == master_key) {
     move noun to igor;
     print_ret (IgorsVoice)"I sure am glad to get that back!";
    }
    print_ret (IgorsVoice)"No, thanks, I don't need that.";
   NotUnderstood: print_ret (IgorsVoice)"I don't understand.";
  ]
 has scenery;
