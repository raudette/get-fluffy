
Object kaitlyn "Kaitlyn"
 with
  name 'kaitlyn',
  narrative_voice 1,
  wearing_top yellow_shirt,
  wearing_pants skinny_jeans,
  bra k_bra,
  panties k_panties,
  description [;
   if ((self.wearing_top ~= nothing) && (self.wearing_pants ~= nothing)) "I'm rockin' a cute, little ", (name)self.wearing_top, " and ", (name)self.wearing_pants, ".";
   if ((self.wearing_top == nothing) && (self.wearing_pants ~= nothing)) "I'm in bra and ", (name)self.wearing_pants, ".";
   if ((self.wearing_top ~= nothing) && (self.wearing_pants == nothing)) "I'm in ", (name)self.wearing_top, " and panties.";
   if ((self.wearing_top == nothing) && (self.wearing_pants == nothing)) "I'm looking pretty good in my bra and panties.";
  ],
  before [;
   Exit:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(KAITLYN_BEFORE, actor, EXIT_ACTION, noun, second); #Endif;
   Go:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(KAITLYN_BEFORE, actor, GO_ACTION, noun, second); #Endif;
   Give:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(KAITLYN_BEFORE, actor, GIVE_ACTION, noun, second); #Endif;
    if (OnPhone(self)) "It'd be hard to give something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
  ],
 has animate ~male female concealed proper transparent;

Room_Key k_key "room key" kaitlyn
 class Britney_Object Ownable_Object
 with
  name 'room' 'key',
  description "It has the hotel's logo, but no room number.",
  article "my",
  owner kaitlyn,
  key_to_room room_402;

Top yellow_shirt "yellow t-shirt" kaitlyn
 with
  name 'yellow' 'shirt' 'top' 't-shirt',
  article "my",
  owner kaitlyn
 has worn;

Pants skinny_jeans "skinny jeans" kaitlyn
 with
  name 'skinny' 'jeans' 'pants',
  article "my",
  owner kaitlyn
 has worn pluralname;

! Clothes that are initially hidden
Underwear k_bra "bra"
 with
  name 'bra' 'tits' 'boobs' 'breasts',
  description "I like how my boobs look in this bra.",
  article "my",
  owner kaitlyn,
  before [;
   Touch, Kiss:
    "This is not that kind of game.";
  ],
 has ~worn animate pluralname; ! Animate so I can kiss them!

Underwear k_panties "panties"
 with
  name 'panties',
  article "my",
  owner kaitlyn
 has ~worn pluralname;

! Might expect 'has talkable' for a phone, but this phone is basically a teleporter ;-)
Disappearing_Object smartphone "smartphone" kaitlyn
 with
  ! Because the first one is the same as Phone mode, will remove it when in Home mode
  ! Glulx wordsize = 4, so #name is 20
  owner kaitlyn,
  name 'phone' 'smartphone' 'cell' 'cellular' 'mobile' 'screen' 'display',
  initial "~Hey, there's my smartphone!~",
  description [;
   !if (gg_grwin == nothing) gg_grwin = glk_window_open(gg_mainwin, winmethod_Right+winmethod_Fixed, 300, wintype_Graphics, GG_GRWIN_ROCK);
   !glk_image_draw(gg_grwin, 1, 0, 0);
   if (self.mode ~= MODE_OFF) <Examine screen>;
   else print "I love my smartphone, it's got a full HD screen and, below the screen, is the Home button.^";
   if (FlagOn(SMARTPHONE_LED_BLINKING)) print "^Hey, the notification light is blinking!^";
   rtrue;
  ],
  invent "my smartphone", ! So inventory doesn't list the screen, buttons, icons, etc
  article "my",
  mode MODE_OFF,
  sms_from,
  sms_text,
  before [;
   Push, Touch:
    !if (self.mode == MODE_HOME) <<Push call_icon>>;
    "You'll have to be more specific.";
   Drop:
    if ((OnPhone()) && (telephone hasnt general)) "Don't be rude, you need to hang up first.";
    move self to location;
    "I put my smartphone down carefully.";
  ],
  change_mode [new_mode o;
   ! Switching out of Text mode, clear existing conversation
   self.mode = new_mode;
   if (self.mode ~= MODE_OFF) self.interact();
   if (self.mode == MODE_HOME) {
    objectloop(o ofclass Icon) {
     move o to screen;
    }
   } else {
    objectloop(o ofclass Icon) {
     remove o;
    }
   }
   if (self.mode == MODE_CONTACTS) {
    objectloop(o ofclass Contact) {
     move o to screen;
    }
   } else {
    objectloop(o ofclass Contact) {
     remove o;
    }
   }
   if (self.mode == MODE_PHOTOS) {
    current_photo = MAX_PHOTOGRAPHS - Photograph.remaining();
   }
  ],
  interact [;
   self.move_counter = SMARTPHONE_TIMEOUT;
   #Ifdef DEBUG_PHONES; print "DEBUG interact smartphone.move_counter ", self.move_counter; new_line; #Endif;
   StartDaemon(self);
  ],
  move_counter,
  daemon [;
   if (call_person == nothing) {
    self.move_counter--;
    #Ifdef DEBUG_PHONES; print "DEBUG daemon smartphone.move_counter ", self.move_counter; new_line; #Endif;
    if (self.move_counter == 0) {
     self.change_mode(MODE_OFF);
     StopDaemon(self);
    }
   } else {
    #Ifdef DEBUG_PHONES; print "DEBUG On smartphone call_person ", (name)call_person, "call_room ", (name)call_room; new_line; #Endif;
   }
  ]
 has container transparent;

Object screen "screen" smartphone
 with
  description [ o;
   switch (parent(self).mode) {
    MODE_OFF: "It's off.";
    MODE_HOME: "The screen's got four icons, labelled Contacts, Messages, Camera and Photos.";
    ! Contacts is for outgoing calls to Britney
    MODE_CONTACTS:
     if (call_person == nothing) {
      print "Contacts:";
      objectloop (o ofclass Contact) {
       print "^ ", (name)o.contact_noun;
      }
      new_line;
      rtrue;
     } else "It has a picture of ", (name)call_person, " and a Hang Up button.";
    ! Text mode is only to receive the ransom message from anonymous
    MODE_MESSAGES:
     ClearFlag(SMARTPHONE_LED_BLINKING);
     if ((smartphone.sms_from ~= nothing) && (smartphone.sms_text ~= nothing)) {
      glk_set_style(style_Preformatted);
      print "Message from ", (name)smartphone.sms_from, ": ~", (string)smartphone.sms_text, "~^";
      glk_set_style(style_Normal);
      if (smartphone.sms_from == anonymous) SetFlag(PLAYER_KNOWS_ABOUT_FLUFFY);
      return;
     }
     "Ready to send a text message.";
    MODE_CAMERA: "Ready to take a photo.";
    MODE_PHOTOS:
     !if (Photograph.remaining() == MAX_PHOTOGRAPHS) "I haven't taken any photos yet.";
     !print "It shows the photo of ";
     objectloop(o ofclass Photograph) {
      if (o.number == current_photo) {
       <<Examine o>>;
      }
     }
     ".";
    default: "Shouldn't happen.";
   }
  ],
  before [;
   Push, Touch: "You'll have to be more specific.";
   Take: "That would be vandalism and you're not that kind of person, are you?";
  ]
 has container transparent;

Object home_button "home" smartphone
 with
  name 'home',
  before [;
   Push, Touch:
    if (smartphone notin player) move smartphone to player;
    switch (smartphone.mode) {
     MODE_OFF: print "I pressed the home button and entered my PIN.^";
     MODE_HOME: print "Nothing happens.^";
     default: print "Back to home screen.^";
    }
    smartphone.change_mode(MODE_HOME);
    rtrue;
  ]
 has static;

! The icons have to be moved to the screen when in MODE_HOME, otherwise removed so you can't interact with them
Icon contacts_icon "contacts"
 with
  mode MODE_CONTACTS,
  name 'Contacts';

Icon messages_icon "messages"
 with
  mode MODE_MESSAGES,
  name 'Messages';

Icon camera_icon "camera"
 with
  mode MODE_CAMERA,
  name 'Camera';

Icon photos_icon "photos"
 with
  mode MODE_PHOTOS,
  name 'Photos';

! Contacts
Contact contact_britney
 with
  contact_noun britney,
  name 'Britney',
  before [;
   Push, Touch:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(CONTACT_BRITNEY_BEFORE, actor, PUSH_ACTION, noun, second); #Endif;
  ];

Girl britney "Britney" room_403
 with
  name 'Britney' 'Brit',
  wearing_top blue_shirt,
  wearing_pants yoga_pants,
  bra b_bra,
  panties b_panties,
  destination_floor,
  destination_room, ! can be nothing if she's just looking around
  is_following false,
  contact_icon contact_britney,
  initial [;
   #Ifdef DEBUG_DAEMONS; print "DEBUG britney daemon stop^"; #Endif;
   StopDaemon(self);
   if (britney.is_following) rtrue;
   "Britney, my BFF, is here.";
  ],
  description [ o n i;
   if (OnPhone(britney)) "Britney has a nice voice on the phone.";
   n = 0;
   objectloop(o ofclass Britney_Object) {
    if ((o in britney) && (o hasnt worn)) n++;
   }
   if (n > 0) {
    i = 0;
    objectloop(o ofclass Britney_Object) {
     if ((o in britney) && (o hasnt worn)) {
      switch (++i) {
       1: print "Britney's carrying ";
       default: if (i < n) print ", ";
       else print " and ";
      };
      if (o.owner == kaitlyn) print "my ";
      else print "her ";
      print (name)o;
     }
    }
   } else print "Britney's a brunette, she's slim and athletic like me";
   print ", and she's wearing a ";
   if ((self.wearing_top ~= nothing) && (self.wearing_pants ~= nothing)) print_ret (name)self.wearing_top, " and ", (name)self.wearing_pants, ".";
   if ((self.wearing_top == nothing) && (self.wearing_pants ~= nothing)) "bra and ", (name)self.wearing_pants, ".";
   if ((self.wearing_top ~= nothing) && (self.wearing_pants == nothing)) print_ret (name)self.wearing_top, " and panties.";
   if ((self.wearing_top == nothing) && (self.wearing_pants == nothing)) "bra and panties.";
  ],
  before [;
   Give:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_BEFORE, actor, GIVE_ACTION, noun, second); #Endif;
    if (OnPhone(self)) "It'd be hard to give something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
   Show:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_BEFORE, actor, SHOW_ACTION, noun, second); #Endif;
    if (OnPhone(self)) "It's hard to show something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
  ],
  life [ o;
   Give:
    ! Giving to Britney...
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_LIFE, actor, GIVE_ACTION, noun, second); #Endif;
    if (noun ofclass Britney_Object) {
     move noun to britney;
     print_ret (BritneysVoice)"Thanks.";
    }
   Show:
    ! Showing to Britney...
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_LIFE, actor, SHOW_ACTION, noun, second); #Endif;
    ! if (call_person == self) "It's hard to show something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
    if (noun == smartphone) {
     if (smartphone.mode == MODE_PHOTOS) {
      ! Find current photo
      objectloop(o ofclass Photograph) {
       if (o.number == current_photo) {
        switch (o.subject) {
         fluffy: print_ret (BritneysVoice)"Omigod, I love Fluffy, he's soo cute!";
         igor: print_ret (BritneysVoice)"Isn't that the guy from the front desk?";
         britney:
          print (BritneysVoice)"Oh, that's a pretty good photo of me";
          if ((o.wearing_top == nothing) || (o.wearing_pants == nothing)) print_ret (BritneysVoice)", but make sure you don't show that to anyone else!";
          else print_ret (BritneysVoice)".~";
         kaitlyn:
          print_ret (BritneysVoice)"That's an awesome photo of you!";
         computer:
          if (FlagOn(PLAYER_KNOWS_MESSAGE)) {
           SetFlag(BRITNEY_KNOWS_MESSAGE);
           print_ret (BritneysVoice)"We need to go there and find Fluffy!";
          }
         default: print_ret (BritneysVoice)"That's a nice photo.";
        }
        break;
       }
      }
     }
     if (smartphone.mode == MODE_MESSAGES) {
      if (smartphone.sms_from == anonymous) {
       if (FlagOff(BRITNEY_KNOWS_ABOUT_FLUFFY)) {
        SetFlag(BRITNEY_KNOWS_ABOUT_FLUFFY);
        print_ret (BritneysVoice)"Omigod, someone took Fluffy? What are we gonna do to get him back?";
       } print_ret (BritneysVoice)"I don't what else I can tell you to help.";
      } else print_ret (BritneysVoice)"Why are you showing me your text messages?";
     }
    print_ret (BritneysVoice)"Is that supposed to be interesting?";
   }
   Tell:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_LIFE, actor, TELL_ACTION, noun, second); #Endif;
    if (second == 'fluffy') {
     if (FlagOn(PLAYER_KNOWS_ABOUT_FLUFFY)) {
      if (FlagOff(BRITNEY_KNOWS_ABOUT_FLUFFY)) {
       print (BritneysVoice)"Omigod, that's awful, I'll go look around for clues";
       SetFlag(BRITNEY_KNOWS_ABOUT_FLUFFY);
       self.destination_floor = 1;
       self.destination_room = nothing;
       StartDaemon(self);
       if (OnPhone(britney)) {
        EndCall(britney);
        print_ret (BritneysVoice)", talk to you later.";
       } print_ret (BritneysVoice)".";
      } else "She says she'll continue looking.";
     } else print_ret (BritneysVoice)"OMG, Kaitlyn, I know you love your dog!";
    }
    "She doesn't seem interested.";
   Ask:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_LIFE, actor, ASK_ACTION, noun, second); #Endif;
   Kiss:
    print_ret (BritneysVoice)"I love you, Kaitlyn, but not that way.";
  ],
  orders [;
   Give:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, GIVE_ACTION, noun, second); #Endif;
    move noun to player;
    print_ret (BritneysVoice)"ok ", (name)noun;
   Drop:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, DROP_ACTION, noun, second); #Endif;
    if ((noun ofclass Britney_Object) && (noun in britney)) {
     if (OnPhone(britney)) {
      move noun to call_room;
     } else {
      move noun to location;
     }
     print_ret (BritneysVoice)"Ok.";
    }
   Take:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, TAKE_ACTION, noun, second); #Endif;
    if ((noun ofclass Britney_Object) && (noun notin britney)) {
     if (OnPhone(britney)) {
      if (noun in call_room) {
       move noun to britney;
       print_ret (BritneysVoice)"Ok.";
      }
     } else {
      if (noun in parent(britney)) {
       move noun to britney;
       print_ret (BritneysVoice)"Ok.";
      }
     }
    }
   Look:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, LOOK_ACTION, noun, second); #Endif;
    print_ret (BritneysVoice)"ToDo.";
   Disrobe:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, DISROBE_ACTION, noun, second); #Endif;
    if (~~(location ofclass Hotel_Room)) print_ret (BritneysVoice)"I can't undress in public!";
    if (noun ofclass Top) {
     DisrobeTop(actor, noun);
     rtrue;
    }
    if (noun ofclass Pants) {
     DisrobePants(actor, noun);
     rtrue;
    }
   Wear:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, WEAR_ACTION, noun, second); #Endif;
    if (noun ofclass Top) {
     WearTop(actor, noun);
     rtrue;
    }
    if (noun ofclass Pants) {
     WearPants(actor, noun);
     rtrue;
    }
   ComeHere:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, COME_HERE_ACTION, noun, second); #Endif;
    if (OnPhone(britney)) {
     if ((self.wearing_top == nothing) || (self.wearing_pants == nothing)) print_ret (BritneysVoice)"I'm not walking out of here dressed like this!";
     if (player in basement or roof) print_ret (BritneysVoice)"That's for authorized personnel only.";
     if (player in elevator) print_ret (BritneysVoice)"Let's meet somewhere other than the elevator.";
     !if (player in room1 or room2 or room3 or room4 or room5 or room6 or room7) "~Ok, stay there and I'll be there soon.~";
     if (parent(player) ofclass Hall or Hotel_Room) self.destination_floor = parent(player).floor_number;
     else self.destination_floor = 1;
     self.destination_room = location;
     !if (player in street) self.destination_on_route = lobby;
     !if (player in hall or room1 or room2 or room3 or room4 or room5 or room6 or room7) self.destination_on_route = hall;
     StartDaemon(self);
     EndCall(britney);
     print_ret (BritneysVoice)"Ok, I'll be there as soon as I can.";
    }
   ! ToDo GoTo
   FollowMe:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, FOLLOW_ME_ACTION, noun, second); #Endif;
    britney.is_following = true;
    print_ret (BritneysVoice)"Sure, I'll come with you.";
   StayHere:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, STAY_HERE_ACTION, noun, second); #Endif;
    britney.is_following = false;
    print_ret (BritneysVoice)"Ok, I'll stay here.";
   NotUnderstood: print_ret (BritneysVoice)"I don't understand.";
  ],
  daemon [ to_room;
   #Ifdef DEBUG_DAEMONS;
    print "DEBUG britney daemon start parent ", (name)parent(self), " destination floor ", self.destination_floor, " destination room ", (name)self.destination_room, ".^";
   #Endif;
   to_room = nothing;
   switch (parent(self)) {
    room_501, room_502, room_503, room_504, room_505, room_506, room_507:
     to_room = fifth_floor;
    fifth_floor:
     if (self.destination_floor < 5) to_room = fourth_floor;
     else to_room = self.destination_room;
    room_401, room_402, room_403, room_404, room_405, room_406, room_407:
     to_room = fourth_floor;
    fourth_floor:
     if (self.destination_floor < 4) to_room = third_floor;
     else {
      if (self.destination_floor > 4) to_room = fifth_floor;
      else to_room = self.destination_room;
     }
    room_301, room_302, room_303, room_304, room_305, room_306, room_307:
     to_room = third_floor;
    third_floor:
     if (self.destination_floor < 3) to_room = second_floor;
     else {
      if (self.destination_floor > 3) to_room = fourth_floor;
      else to_room = self.destination_room;
     }
    room_201, room_202, room_203, room_204, room_205, room_206, room_207:
     to_room = second_floor;
    second_floor:
     if (self.destination_floor < 2) to_room = elevator_vestibule;
     else {
      if (self.destination_floor > 2) to_room = third_floor;
      else to_room = self.destination_room;
     }
    elevator_vestibule:
     if (self.destination_floor > 1) {
      to_room = second_floor;
     } else {
      if (self.destination_room == nothing) to_room = random(lobby, gift_shop, casino, restaurant, nightclub);
      else {
       if (self.destination_room == street) to_room = lobby;
       else to_room = self.destination_room;
      }
     }
    lobby:
     if (self.destination_room == nothing) to_room = random(gift_shop, elevator_vestibule);
     else {
      if (self.destination_room == street) to_room = street;
      else to_room = elevator_vestibule;
     }
    gift_shop:
     if (self.destination_room == nothing) to_room = random(lobby, elevator_vestibule, casino);
     else to_room = elevator_vestibule;
    casino:
     if (self.destination_room == nothing) to_room = random(gift_shop, elevator_vestibule, restaurant);
     else to_room = elevator_vestibule;
    restaurant:
     if (self.destination_room == nothing) to_room = random(casino, elevator_vestibule, nightclub);
     else to_room = elevator_vestibule;
    nightclub:
     if (self.destination_room == nothing) to_room = random(restaurant, elevator_vestibule);
     else to_room = elevator_vestibule;
    street: to_room = lobby;
    default: print "Britney doesn't even know where she is!^";
   }
   #Ifdef DEBUG_DAEMONS; print "DEBUG britney daemon to_room ", to_room; new_line; #Endif;
   if (to_room ~= nothing) {
    move self to to_room;
    if (player in to_room) {
     self.destination_room = to_room;
     if (parent(player) ofclass Hotel_Room) print "I heard a knock on the door and let Britney in.";
     else print "^Just then, Britney arrived.";
    }
    if (parent(self) == self.destination_room) {
     #Ifdef DEBUG_DAEMONS; print "DEBUG britney daemon stop^"; #Endif;
     StopDaemon(self);
    }
   }
   #Ifdef DEBUG_DAEMONS; print "DEBUG britney daemon end parent ", (name)parent(self); new_line; #Endif;
  ];

Room_Key b_key "room key" britney
 class Britney_Object Ownable_Object General_Object
 with
  name 'room' 'key',
  description "It has the hotel's logo, but no room number.",
  article "Britney's",
  owner britney,
  key_to_room room_403;

! Clothes that Britney's wearing
Top blue_shirt "blue t-shirt" britney
 with
  name 'blue' 'shirt' 'top' 't-shirt',
  article "Britney's",
  owner britney
 has worn;

Pants yoga_pants "yoga pants" britney
 with
  name 'yoga' 'pants',
  article "Britney's",
  owner britney
 has worn pluralname;

! Clothes that are initially hidden
Underwear b_bra "bra"
 with
  name 'bra',
  article "Britney's",
  owner britney
 has ~worn;

Underwear b_panties "panties"
 with
  name 'panties',
  article "Britney's",
  owner britney
 has ~worn pluralname;

Object b_tits "Britney's tits" thedark
 with	
  name 'tits' 'boobs' 'breasts',
  description "They're smaller than mine, but still awesome.",
  article "Britney's",
  before [;
   Touch, Kiss:
    if (OnPhone(britney)) "Can't exactly feel her up over the phone!";
    "Focus on the game.";
  ],
 has scenery static pluralname proper animate; ! Animate so you can try to kiss them!

! Igor's in the lobby
Guy igor "Igor" lobby
 with
  name 'Igor' 'man',
  description [;
   if (OnPhone(self)) "Over the phone, you notice his accent more.";
   "Igor's wearing a hotel uniform.";
  ],
  before [;
   Give:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_BEFORE, actor, GIVE_ACTION, noun, second); #Endif;
    if (OnPhone(self)) "It'd be hard to give ", (name)self, " something when I'm on the phone with ", (PronounAcc)self, "!";
   Show:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_BEFORE, actor, SHOW_ACTION, noun, second); #Endif;
    if (OnPhone(self)) "It's hard to show something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
  ],
  life [ o;
   Give:
    ! Giving to Igor...
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_LIFE, actor, GIVE_ACTION, noun, second); #Endif;
    if (noun == master_key) {
     move noun to igor;
     print_ret (IgorsVoice)"Thanks for getting that back to me!";
    }
    print_ret (IgorsVoice)"No, thanks, I don't need that.";
   Show:
    ! Showing to Igor...
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_LIFE, actor, SHOW_ACTION, noun, second); #Endif;
    if (noun == smartphone) {
     if (smartphone.mode == MODE_PHOTOS) {
      ! Find current photo
      objectloop(o ofclass Photograph) {
       if (o.number == current_photo) {
        switch (o.subject) {
         fluffy: print_ret (IgorsVoice)"Oh, that's your dog? He's really cute!";
         igor: print_ret (IgorsVoice)"Hey, that's me!";
         britney: print_ret (IgorsVoice)"Yes, that's your friend, how could I forget her?";
         kaitlyn:
          print (IgorsVoice)"That's an awesome photo of you";
          if ((o.wearing_top == nothing) || (o.wearing_pants == nothing)) print_ret (IgorsVoice)", but you shouldn't be showing that to me.";
          else print_ret (IgorsVoice)".~";
         computer:
          SetFlag(PLAYER_KNOWS_MESSAGE);
          print_ret (IgorsVoice)"Oh, that's Russian, it means, ~Vlad, the dog's in the basement.~";
         default: print_ret (IgorsVoice)"That's a nice photo.";
        }
        break;
       }
      }
     }
     if (smartphone.mode == MODE_MESSAGES) {
      if (smartphone.sms_from == anonymous) {
       if (FlagOff(IGOR_KNOWS_ABOUT_FLUFFY)) {
        SetFlag(IGOR_KNOWS_ABOUT_FLUFFY);
        print_ret (IgorsVoice)"I'm so sorry someone took your dog, if there's anything I can do to help, let me know, I'm always here.";
       } print_ret (IgorsVoice)"I don't know what else I can tell you to help.";
      } else print_ret (IgorsVoice)"Why are you showing me your text messages?";
     }
    print_ret (IgorsVoice)"Is that supposed to be interesting?";
   }
   Ask:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_LIFE, actor, ASK_ACTION, noun, second); #Endif;
    if (second == 'russians' or 'vlad' or 'vladimir') {
     if (FlagOn(PLAYER_KNOWS_ABOUT_FLUFFY) && FlagOn(IGOR_KNOWS_ABOUT_FLUFFY)) {
      if (FlagOff(IGOR_HAS_REVEALED_202)) {
       SetFlag(IGOR_HAS_REVEALED_202);
       print_ret (IgorsVoice)"I could get in trouble for telling you this, but there's two big Russian guys named Vladimir and Sergei in room 202.";
      }
      else {
       if (FlagOff(IGOR_HAS_HINTED_KEY)) {
        SetFlag(IGOR_HAS_HINTED_KEY);
        print_ret (IgorsVoice)"I'll *really* get in trouble for this, but if you had a master key, maybe you could find something in their room.";
       }
       else print_ret (IgorsVoice)"There's nothing else I can tell you about the Russians.";
      }
     }
     else print_ret (IgorsVoice)"I can't talk about guests.";
    }
    "Igor didn't seem to know anything about that.";
   Tell:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_LIFE, actor, TELL_ACTION, noun, second); #Endif;
    if (second == 'fluffy') {
     if (FlagOn(PLAYER_KNOWS_ABOUT_FLUFFY)) {
      if (FlagOff(IGOR_KNOWS_ABOUT_FLUFFY)) {
       SetFlag(IGOR_KNOWS_ABOUT_FLUFFY);
       print_ret (IgorsVoice)"Oh no, someone took your dog? If there's anything I can do to help, let me know.";
      } print_ret (IgorsVoice)"So no more news, then?";
     } print_ret (IgorsVoice)"Well, good luck with the dog show!";
    }
    if (second == 'russians' or 'vlad' or 'flashback') {
     if (FlagOn(PLAYER_HAD_FLASHBACK) && FlagOn(IGOR_KNOWS_ABOUT_FLUFFY)) {
      print_ret (IgorsVoice)"Yeah, there's a couple Russian guys that checked in yesterday.";
     }
    }
    "He doesn't seem interested.";
  ],
  orders [;
   ComeHere:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_ORDERS, actor, COME_HERE_ACTION, noun, second); #Endif;
    if (OnPhone(igor)) print_ret (IgorsVoice)"I need to stay here, sorry.";
   FollowMe:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_ORDERS, actor, FOLLOW_ME_ACTION, noun, second); #Endif;
    if (~~(OnPhone(igor))) print_ret (IgorsVoice)"I need to stay here, sorry.";
   StayHere:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_ORDERS, actor, STAY_HERE_ACTION, noun, second); #Endif;
    print_ret (IgorsVoice)"Of course, I have to stay here.";
   Give:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_ORDERS, actor, GIVE_ACTION, noun, second); #Endif;
    !if (call_person == self) "It'd be hard for ", (name)self, " to give you anything when I'm on the phone with ", (PronounAcc)self, "!";
    if ((noun in self) && (noun == master_key) && (second == player)) {
     if (FlagOn(IGOR_KNOWS_ABOUT_FLUFFY) || FlagOn(IGOR_HAS_REVEALED_202)) {
      move noun to second;
      print_ret (IgorsVoice)"Well, you really need to get your dog back, so here you go.";
     } else print_ret (IgorsVoice)"Sorry, I'd get in big trouble if I did that.";
    }
   Take:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_ORDERS, actor, TAKE_ACTION, noun, second); #Endif;
    if (noun == master_key) {
     move noun to igor;
     print_ret (IgorsVoice)"I sure am glad to get that back!";
    }
    print_ret (IgorsVoice)"No, thanks, I don't need that.";
   NotUnderstood: print_ret (IgorsVoice)"I don't understand.";
  ]
 has scenery;

! Igor has the master key
Disappearing_Object master_key "master key" igor
 class Igor_Object
 with
  name 'master' 'key',
  description "It has the hotel's logo, but no room number.",
  article "Igor's";

! Objects in hotel rooms
Top pink_shirt "pink shirt" room_402
 with
  name 'pink' 'shirt' 'top' 't-shirt',
  ! Let the hotel room mention this
  describe [;
   rtrue;
  ],
  article "my",
  owner kaitlyn
 has ~worn;

Top green_shirt "green t-shirt" room_403
 with
  name 'green' 'shirt' 'top' 't-shirt',
  ! Let the hotel room mention this
  describe [;
   rtrue;
  ],
  article "Britney's"
  owner britney
 has ~worn;

General_Object computer "computer" room_202
 with
  name 'computer',
  description [;
   SetFlag(PLAYER_HAS_SEEN_MESSAGE);
   print "There's something on the computer that I can't understand! It reads:^";
   glk_set_style(style_Preformatted);
   print (char)ucVe, (char)lcEl, (char)lcA, (char)lcDe, ", ";
   print (char)lcShch, (char)lcYe, (char)lcEn, (char)lcO, (char)lcKa, " ";
   print (char)lcVe, " ";
   print (char)lcPe, (char)lcO, (char)lcDe, (char)lcVe, (char)lcA, (char)lcEl, (char)lcYe, ".^";
   print (char)ucEs, (char)lcYe, (char)lcEr, (char)lcGe, (char)lcYe, (char)lcY, "^";
   glk_set_style(style_Normal);
  ]
 has static scenery;

Object fluffy "Fluffy" thedark;

! SMS thread with Vladimir Putkin
Guy anonymous "Anonymous" thedark
 with
  name 'anonymous';
