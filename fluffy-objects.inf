
Public_Room street "Las Vegas Blvd."
 with
  ! This is the starting location
  initial [ hh;
   CurrentTime();
   hh = date_array-->4;
   print "It's a ";
   if ((hh >= 6) && (hh < 12)) print "beautiful morning";
   else if ((hh >= 12) && (hh < 18)) print "hot afternoon";
   else if ((hh >= 18) && (hh < 21)) print "warm evening";
   else print "cool night";
   if (FlagOff(PLAYER_KNOWS_ABOUT_FLUFFY)) " and I'm in the middle of Las Vegas! I look up and down the street and think to myself how exciting it is to be here.";
   else " but I need to focus on getting Fluffy!";
  ],
  description [;
   if (self hasnt visited) "The Timbuktu Resort and Casino is just south of me.";
   else "The Timbuktu is to the south.";
  ],
  s_to lobby;

Public_Room lobby "Lobby"
 with
  initial [;
   if (self hasnt visited) "This is the lobby of the Timbuktu, the nicest place I could afford, it's really not that bad, but it's so-o-o Las Vegas.";
   rtrue;
  ],
  description [;
   if (self hasnt visited) "I can go north back to the street, west to the gift shop and south to the elevator vestibule.";
   "Back to the street is north, the gift shop is west and the elevator is south.";
  ],
  n_to street,
  w_to gift_shop,
  s_to elevator_vestibule;

Public_Room gift_shop "Gift Shop"
 with
  initial [;
    if (self hasnt visited) "This is the gift shop, full of tacky, over-priced dust collectors.";
    rtrue;
  ],
  description [;
   if (self hasnt visited) "From here, I can go east back to the lobby, south-east to the elevator or south to the casino.";
   "East back to the lobby, south-east to the elevator or south to the casino.";
  ],
  e_to lobby,
  s_to casino,
  se_to elevator_vestibule;

Public_Room casino "Casino"
 with
  initial [;
   if (self hasnt visited) "Wow, this could be the worst ~casino~ in the world. There's one slot machine and nothing else I'm interested in!";
   rtrue;
  ],
  description [;
   if (self hasnt visited) print "It's dimly lit with lots of people very intent on what they're doing. ";
   "The gift shop is north, elevator vestibule is east, restaurant is south.";
  ],
  n_to gift_shop,
  e_to elevator_vestibule,
  s_to restaurant;

Public_Room restaurant "Restaurant"
 with
  initial [;
   if (self hasnt visited) "It looks like a rather nice restaurant.";
   rtrue;
  ],
  description "North to the casino, north-east to the elevator vestibule, east to the nightclub.",
  n_to casino,
  ne_to elevator_vestibule,
  e_to nightclub;

Public_Room nightclub "Nightclub"
 with
  initial [;
   if (self hasnt visited) "It's loud and crowded with all kinds of seedy people, my favourite kind of place.";
   rtrue;
  ],
  description " The elevator vestibule is north and the restaurant is west.",
  n_to elevator_vestibule,
  w_to restaurant;

Public_Room elevator_vestibule "Elevator Vestibule"
 with
  initial [;
   if (self hasnt visited) "The elevator vestibule is the hub of the hotel, from here I can get to any other room on the ground floor.";
   rtrue;
  ],
  description "I'm in the elevator vestibule, the elevator itself is just to the east.",
  e_to [;
   if (elevator_doors hasnt open) "The elevator must be at a different floor.";
   return elevator;
  ],
  floor_number 1,
  n_to lobby,
  nw_to gift_shop,
  w_to casino,
  sw_to restaurant,
  s_to nightclub,
  u_to [;
   print "I decide to save the environment and take the stairs.^";
   return second_floor;
  ],
  d_to [;
   if (master_key notin player) {
    print "The door says it's for authorized hotel staff only";
    if (FlagOn(PLAYER_KNOWS_MESSAGE)) ". If I had some sort of master key, maybe I could get down there and rescue Fluffy!";
    else ".";
   }
   return basement;
  ];

Button call_elevator_button "elevator button"
 with
  name 'arrow' 'up' 'down' 'button',
  description "The button has a picture of arrows going up and down.",
  found_in elevator_vestibule second_floor third_floor fourth_floor fifth_floor,
  before [;
   ! Call the elevator
   Push, Touch:
    if (elevator.floor_number == parent(player).floor_number) "Nothing happens.";
    elevator.floor_number = parent(player).floor_number;
    give elevator_doors open;
  ];

Object elevator_doors "elevator doors"
 with
  name 'elevator' 'doors',
  initial [;
   if (location ~= elevator) "To the east is an elevator.";
   "The elevator is ready.";
  ],
  description [;
   print "The elevator doors are ";
   if (self has open) "open.";
   "closed. Next to the elevator, you see a button.";
  ],
  found_in elevator_vestibule second_floor third_floor fourth_floor fifth_floor elevator,
  door_to [;
   if (location ofclass Hall) return elevator;
   switch (elevator.floor_number) {
    1: return elevator_vestibule;
    2: return second_floor;
    3: return third_floor;
    4: return fourth_floor;
    5: return fifth_floor;
   }
  ],
  door_dir [;
   if (location ofclass Hall) return e_to;
   return w_to;
  ]
 has static door ~open;

Object elevator "Elevator" class Public_Room
 with
  name 'elevator',
  description [;
   if (FlagOn(PLAYER_KNOWS_ABOUT_FLUFFY) && FlagOff(PLAYER_HAD_FLASHBACK)) TriggerFlashback();
   print "I'm in the hotel's main elevator, which seems to be ";
   switch (self.floor_number) {
    1: print "at the ground";
    2: print "on the second";
    3: print "on the third";
    4: print "on the fourth";
    5: print "on the fifth";
   }
   " floor.";
  ],
  floor_number 3,
  before [;
   Exit: <<Go w_obj>>;
  ],
  w_to [;
   switch (self.floor_number) {
    1: return elevator_vestibule;
    2: return second_floor;
    3: return third_floor;
    4: return fourth_floor;
    5: return fifth_floor;
   }
  ]
 has enterable;

Bunch_Of_Buttons elevator_buttons "buttons" elevator
 with
  name 'buttons' 'panel',
  initial "There is a panel with several buttons.",
  description "The buttons are labelled 'G', '2', '3', '4' and '5'.";

Elevator_Button ground_button "ground button" elevator_buttons
 with
  name 'g//' 'ground' 'button',
  destination_floor 1;

Elevator_Button button2 "second floor button" elevator_buttons
 with
  name '2//' 'button',
  destination_floor 2;

Elevator_Button button3 "third floor button" elevator_buttons
 with
  name '3//' 'button',
  destination_floor 3;

Elevator_Button button4 "fourth floor button" elevator_buttons
 with
  name '4//' 'button',
  destination_floor 4;

Elevator_Button button5 "fifth floor button" elevator_buttons
 with
  name '5//' 'button',
  destination_floor 5;

Object stairs "stairs"
 with
  name 'stairs',
  initial "I see a set of stairs.",
  description [;
   print "The stairs go ";
   if (location == basement) "up.";
   if (location == roof) "down.";
   "up and down.";
  ],
  found_in basement elevator_vestibule second_floor third_floor fourth_floor fifth_floor roof
 has static pluralname;

Hall second_floor "Second Floor"
 with
  name 'second' 'floor' 'hall',
  floor_number 2,
  se_to door_201,
  s_to door_202,
  sw_to door_203,
  w_to door_204,
  nw_to door_205,
  n_to door_206,
  ne_to door_207,
  u_to [;
   print "Good idea, take the stairs.^";
   return third_floor;
  ],
  d_to [;
   print "Good idea, take the stairs.^";
   return elevator_vestibule;
  ];

Hotel_Room_Door door_201 "Door 201"
 with
  name '201' 'room' 'door' '1//',
  found_in second_floor room_201,
  to_room room_201,
  to_hall second_floor,
  dir_in se_to,
  dir_out nw_to;

Hotel_Room room_201 "Room 201"
 with
  nw_to door_201,
  door_out door_201,
  floor_number 2,
  room_number 201;

Hotel_Room_Door door_202 "Door 202"
 with
  name '202' 'room' 'door' '2//',
  found_in second_floor room_202,
  to_room room_202,
  to_hall second_floor,
  dir_in s_to,
  dir_out n_to;

Hotel_Room room_202 "Room 202"
 with
  n_to door_202,
  door_out door_202,
  floor_number 2,
  room_number 202;

Hotel_Room_Door door_203 "Door 203"
 with
  name '203' 'room' 'door' '3//',
  found_in second_floor room_203,
  to_room room_203,
  to_hall second_floor,
  dir_in sw_to,
  dir_out ne_to;

Hotel_Room room_203 "Room 203"
 with
  ne_to door_203,
  door_out door_203,
  floor_number 2,
  room_number 203;

Hotel_Room_Door door_204 "Door 204"
 with
  name '204' 'room' 'door' '4//',
  found_in second_floor room_204,
  to_room room_204,
  to_hall second_floor,
  dir_in w_to,
  dir_out e_to;

Hotel_Room room_204 "Room 204"
 with
  e_to door_204,
  door_out door_204,
  floor_number 2,
  room_number 204;

Hotel_Room_Door door_205 "Door 205"
 with
  name '205' 'room' 'door' '5//',
  found_in second_floor room_205,
  to_room room_205,
  to_hall second_floor,
  dir_in nw_to,
  dir_out se_to;

Hotel_Room room_205 "Room 205"
 with
  se_to door_205,
  door_out door_205,
  floor_number 2,
  room_number 205;

Hotel_Room_Door door_206 "Door 206"
 with
  name '206' 'room' 'door' '6//',
  found_in second_floor room_206,
  to_room room_206,
  to_hall second_floor,
  dir_in n_to,
  dir_out s_to;

Hotel_Room room_206 "Room 206"
 with
  s_to door_206,
  door_out door_206,
  floor_number 2,
  room_number 206;

Hotel_Room_Door door_207 "Door 207"
 with
  name '207' 'room' 'door' '7//',
  found_in second_floor room_207,
  to_room room_207,
  to_hall second_floor,
  dir_in ne_to,
  dir_out sw_to;

Hotel_Room room_207 "Room 207"
 with
  sw_to door_207,
  door_out door_207,
  floor_number 2,
  room_number 207;

Hall third_floor "Third Floor"
 with
  name 'third' 'floor' 'hall',
  floor_number 3,
  se_to door_301,
  s_to door_302,
  sw_to door_303,
  w_to door_304,
  nw_to door_305,
  n_to door_306,
  ne_to door_307,
  u_to [;
   print "Good idea, take the stairs.^";
   return fourth_floor;
  ],
  d_to [;
   print "Good idea, take the stairs.^";
   return second_floor;
  ];

Hotel_Room_Door door_301 "Door 301"
 with
  name '301' 'room' 'door' '1//',
  found_in third_floor room_301,
  to_room room_301,
  to_hall third_floor,
  dir_in se_to,
  dir_out nw_to;

Hotel_Room room_301 "Room 301"
 with
  nw_to door_301,
  door_out door_301,
  floor_number 3,
  room_number 301;

Hotel_Room_Door door_302 "Door 302"
 with
  name '302' 'room' 'door' '2//',
  found_in third_floor room_302,
  to_room room_302,
  to_hall third_floor,
  dir_in s_to,
  dir_out n_to;

Hotel_Room room_302 "Room 302"
 with
  n_to door_302,
  door_out door_302,
  floor_number 3,
  room_number 302;

Hotel_Room_Door door_303 "Door 303"
 with
  name '303' 'room' 'door' '3//',
  found_in third_floor room_303,
  to_room room_303,
  to_hall third_floor,
  dir_in sw_to,
  dir_out ne_to;

Hotel_Room room_303 "Room 303"
 with
  ne_to door_303,
  door_out door_303,
  floor_number 3,
  room_number 303;

Hotel_Room_Door door_304 "Door 304"
 with
  name '304' 'room' 'door' '4//',
  found_in third_floor room_304,
  to_room room_304,
  to_hall third_floor,
  dir_in w_to,
  dir_out e_to;

Hotel_Room room_304 "Room 304"
 with
  e_to door_304,
  door_out door_304,
  floor_number 3,
  room_number 304;

Hotel_Room_Door door_305 "Door 305"
 with
  name '305' 'room' 'door' '5//',
  found_in third_floor room_305,
  to_room room_305,
  to_hall third_floor,
  dir_in nw_to,
  dir_out se_to;

Hotel_Room room_305 "Room 305"
 with
  se_to door_305,
  door_out door_305,
  floor_number 3,
  room_number 305;

Hotel_Room_Door door_306 "Door 306"
 with
  name '306' 'room' 'door' '6//',
  found_in third_floor room_306,
  to_room room_306,
  to_hall third_floor,
  dir_in n_to,
  dir_out s_to;

Hotel_Room room_306 "Room 306"
 with
  s_to door_306,
  door_out door_306,
  floor_number 3,
  room_number 306;

Hotel_Room_Door door_307 "Door 307"
 with
  name '307' 'room' 'door' '7//',
  found_in third_floor room_307,
  to_room room_307,
  to_hall third_floor,
  dir_in ne_to,
  dir_out sw_to;

Hotel_Room room_307 "Room 307"
 with
  sw_to door_307,
  door_out door_307,
  floor_number 3,
  room_number 307;

Hall fourth_floor "Fourth Floor"
 with
  name 'fourth' 'floor' 'hall',
  floor_number 4,
  se_to door_401,
  s_to door_402,
  sw_to door_403,
  w_to door_404,
  nw_to door_405,
  n_to door_406,
  ne_to door_407,
  u_to [;
   print "Good idea, take the stairs.^";
   return fifth_floor;
  ],
  d_to [;
   print "Good idea, take the stairs.^";
   return third_floor;
  ];

Hotel_Room_Door door_401 "Door 401"
 with
  name '401' 'room' 'door' '1//',
  found_in fourth_floor room_401,
  to_room room_401,
  to_hall fourth_floor,
  dir_in se_to,
  dir_out nw_to;

Hotel_Room room_401 "Room 401"
 with
  nw_to door_401,
  door_out door_401,
  floor_number 4,
  room_number 401;

Hotel_Room_Door door_402 "Door 402"
 with
  name '402' 'room' 'door' '2//',
  found_in fourth_floor room_402,
  to_room room_402,
  to_hall fourth_floor,
  dir_in s_to,
  dir_out n_to;

Hotel_Room room_402 "Room 402"
 with
  n_to door_402,
  door_out door_402,
  floor_number 4,
  room_number 402;

Hotel_Room_Door door_403 "Door 403"
 with
  name '403' 'room' 'door' '3//',
  found_in fourth_floor room_403,
  to_room room_403,
  to_hall fourth_floor,
  dir_in sw_to,
  dir_out ne_to;

Hotel_Room room_403 "Room 403"
 with
  ne_to door_403,
  door_out door_403,
  floor_number 4,
  room_number 403;

Hotel_Room_Door door_404 "Door 404"
 with
  name '404' 'room' 'door' '4//',
  found_in fourth_floor room_404,
  to_room room_404,
  to_hall fourth_floor,
  dir_in w_to,
  dir_out e_to;

Hotel_Room room_404 "Room 404"
 with
  e_to door_404,
  door_out door_404,
  floor_number 4,
  room_number 404;

Hotel_Room_Door door_405 "Door 405"
 with
  name '405' 'room' 'door' '5//',
  found_in fourth_floor room_405,
  to_room room_405,
  to_hall fourth_floor,
  dir_in nw_to,
  dir_out se_to;

Hotel_Room room_405 "Room 405"
 with
  se_to door_405,
  door_out door_405,
  floor_number 4,
  room_number 405;

Hotel_Room_Door door_406 "Door 406"
 with
  name '406' 'room' 'door' '6//',
  found_in fourth_floor room_406,
  to_room room_406,
  to_hall fourth_floor,
  dir_in n_to,
  dir_out s_to;

Hotel_Room room_406 "Room 406"
 with
  s_to door_406,
  door_out door_406,
  floor_number 4,
  room_number 406;

Hotel_Room_Door door_407 "Door 407"
 with
  name '407' 'room' 'door' '7//',
  found_in fourth_floor room_407,
  to_room room_407,
  to_hall fourth_floor,
  dir_in ne_to,
  dir_out sw_to;

Hotel_Room room_407 "Room 407"
 with
  sw_to door_407,
  door_out door_407,
  floor_number 4,
  room_number 407;

Hall fifth_floor "Fifth Floor"
 with
  name 'fifth' 'floor' 'hall',
  floor_number 5,
  se_to door_501,
  s_to door_502,
  sw_to door_503,
  w_to door_504,
  nw_to door_505,
  n_to door_506,
  ne_to door_507,
  u_to [;
   if (master_key notin player) "It's for authorized hotel staff only.";
   print "Great idea, take the stairs.^";
   return roof;
  ],
  d_to [;
   print "Good idea, take the stairs.^";
   return fourth_floor;
  ];

Hotel_Room_Door door_501 "Door 501"
 with
  name '501' 'room' 'door' '1//',
  found_in fifth_floor room_501,
  to_room room_501,
  to_hall fifth_floor,
  dir_in se_to,
  dir_out nw_to;

Hotel_Room room_501 "Room 501"
 with
  nw_to door_501,
  door_out door_501,
  floor_number 5,
  room_number 501;

Hotel_Room_Door door_502 "Door 502"
 with
  name '502' 'room' 'door' '2//',
  found_in fifth_floor room_502,
  to_room room_502,
  to_hall fifth_floor,
  dir_in s_to,
  dir_out n_to;

Hotel_Room room_502 "Room 502"
 with
  n_to door_502,
  door_out door_502,
  floor_number 5,
  room_number 502;

Hotel_Room_Door door_503 "Door 503"
 with
  name '503' 'room' 'door' '3//',
  found_in fifth_floor room_503,
  to_room room_503,
  to_hall fifth_floor,
  dir_in sw_to,
  dir_out ne_to;

Hotel_Room room_503 "Room 503"
 with
  ne_to door_503,
  door_out door_503,
  floor_number 5,
  room_number 503;

Hotel_Room_Door door_504 "Door 504"
 with
  name '504' 'room' 'door' '4//',
  found_in fifth_floor room_504,
  to_room room_504,
  to_hall fifth_floor,
  dir_in w_to,
  dir_out e_to;

Hotel_Room room_504 "Room 504"
 with
  e_to door_504,
  door_out door_504,
  floor_number 5,
  room_number 504;

Hotel_Room_Door door_505 "Door 505"
 with
  name '505' 'room' 'door' '5//',
  found_in fifth_floor room_505,
  to_room room_505,
  to_hall fifth_floor,
  dir_in nw_to,
  dir_out se_to;

Hotel_Room room_505 "Room 505"
 with
  se_to door_505,
  door_out door_505,
  floor_number 5,
  room_number 505;

Hotel_Room_Door door_506 "Door 506"
 with
  name '506' 'room' 'door' '6//',
  found_in fifth_floor room_506,
  to_room room_506,
  to_hall fifth_floor,
  dir_in n_to,
  dir_out s_to;

Hotel_Room room_506 "Room 506"
 with
  s_to door_506,
  door_out door_506,
  floor_number 5,
  room_number 506;

Hotel_Room_Door door_507 "Door 507"
 with
  name '507' 'room' 'door' '7//',
  found_in fifth_floor room_507,
  to_room room_507,
  to_hall fifth_floor,
  dir_in ne_to,
  dir_out sw_to;

Hotel_Room room_507 "Room 507"
 with
  sw_to door_507,
  door_out door_507,
  floor_number 5,
  room_number 507;

Room basement "Basement"
 with
  description [;
   if (FlagOn(PLAYER_KNOWS_MESSAGE)) {
    print "For now, knowing the message and going to the basement is enough.";
    deadflag = 2;
   }
   "I'm in the basement.";
  ],
  u_to elevator_vestibule;

Disappearing_Object -> token "token"
 with
  name 'token' 'coin',
  initial "There's a token here.",
  description "It's a token, silly.";

Room roof "Roof"
 with
  initial [;
   print "Being on the roof of the hotel reminds me of that scene from The Hangover! But my weekend is not gonna be like that!";
  ],
  description [ hh;
   CurrentTime();
   hh = date_array-->4;
   print "It's a ";
   if ((hh >= 6) && (hh < 12)) print "beautiful morning";
   else if ((hh >= 12) && (hh < 18)) print "hot afternoon";
   else if ((hh >= 18) && (hh < 21)) print "warm evening";
   else print "cool night";
   ", and I'm on the roof of the hotel.";
  ],
  d_to fifth_floor;

! Might expect 'has talkable' for a phone, but this phone is basically a teleporter ;-)
! Telephone's general means call active
Object telephone "telephone"
 with
  name 'telephone' 'house' 'phone',
  description "It's the hotel's house phone.",
  found_in lobby room_201 room_202 room_203 room_204 room_205 room_206 room_207 room_301 room_302 room_303 room_304 room_305 room_306 room_307 room_401 room_402 room_403 room_404 room_405 room_406 room_407 room_501 room_502 room_503 room_504 room_505 room_506 room_507,
  before [;
   Drop: if (OnPhone()) "Don't be rude, you need to hang up first.";
  ],
  after [;
   Take: "I pick up the house phone and hear a dial tone.";
  ];

Object kaitlyn "Kaitlyn"
 with
  name 'kaitlyn',
  narrative_voice 1,
  wearing_top yellow_shirt,
  wearing_pants skinny_jeans,
  bra k_bra,
  panties k_panties,
  description [;
   if ((self.wearing_top ~= nothing) && (self.wearing_pants ~= nothing)) "I'm rockin' a cute, little ", (name)self.wearing_top, " and ", (name)self.wearing_pants, ".";
   if ((self.wearing_top == nothing) && (self.wearing_pants ~= nothing)) "I'm in bra and ", (name)self.wearing_pants, ".";
   if ((self.wearing_top ~= nothing) && (self.wearing_pants == nothing)) "I'm in ", (name)self.wearing_top, " and panties.";
   if ((self.wearing_top == nothing) && (self.wearing_pants == nothing)) "I'm looking pretty good in my bra and panties.";
  ],
  before [;
   Exit:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(KAITLYN_BEFORE, actor, EXIT_ACTION, noun, second); #Endif;
   Go:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(KAITLYN_BEFORE, actor, GO_ACTION, noun, second); #Endif;
   Give:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(KAITLYN_BEFORE, actor, GIVE_ACTION, noun, second); #Endif;
    if (OnPhone(self)) "It'd be hard to give something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
   !Disrobe:
   ! #Ifdef DEBUG_CLOTHES; print "DEBUG Kaitlyn before Disrobe actor ", (name)actor, " noun ", (name)noun; new_line; #Endif;
   ! if ((noun == self) && ~~(location ofclass Hotel_Room)) "I realize I can't undress here.";
   ! if (noun ofclass Top) {
   !  DisrobeTop(actor, noun);
   !  rtrue;
   ! }
   ! if (noun ofclass Pants) {
   !  DisrobePants(actor, noun);
   !  rtrue;
   ! }
   !Wear:
   ! #Ifdef DEBUG_CLOTHES; print "DEBUG Kaitlyn before Wear actor ", (name)actor, " noun ", (name)noun; new_line; #Endif;
   ! if (noun ofclass Top) {
   !  WearTop(actor, noun);
   !  rtrue;
   ! }
   ! if (noun ofclass Pants) {
   !  WearPants(actor, noun);
   !  rtrue;
   ! }
  ]
 has animate ~male female concealed proper transparent;

Room_Key k_key "room key" kaitlyn
 class Britney_Object
 with
  name 'room' 'key',
  description "It has the hotel's logo, but no room number.",
  article "my";

Top yellow_shirt "yellow t-shirt" kaitlyn
 with
  name 'yellow' 'shirt' 'top' 't-shirt',
  article "my"
 has worn;

Pants skinny_jeans "skinny jeans" kaitlyn
 with
  name 'skinny' 'jeans' 'pants',
  article "my"
 has worn pluralname;

! Clothes that are initially hidden
Underwear k_bra "bra"
 with
  name 'bra',
  article "my"
 has ~worn;

Underwear k_panties "panties"
 with
  name 'panties',
  article "my"
 has ~worn pluralname;

! Might expect 'has talkable' for a phone, but this phone is basically a teleporter ;-)
Disappearing_Object smartphone "smartphone" kaitlyn
 with
  ! Because the first one is the same as Phone mode, will remove it when in Home mode
  ! Glulx wordsize = 4, so #name is 20
  name 'phone' 'smartphone' 'cell' 'cellular' 'mobile' 'screen' 'display',
  initial "~Hey, there's my smartphone!~",
  description [;
   !if (gg_grwin == nothing) gg_grwin = glk_window_open(gg_mainwin, winmethod_Right+winmethod_Fixed, 300, wintype_Graphics, GG_GRWIN_ROCK);
   !glk_image_draw(gg_grwin, 1, 0, 0);
   if (self.mode ~= MODE_OFF) <Examine screen>;
   else print "I love my smartphone, it's got a full HD screen and, below the screen, is the Home button.^";
   if (FlagOn(SMARTPHONE_LED_BLINKING)) print "^Hey, the notification light is blinking!^";
   rtrue;
  ],
  invent "my smartphone", ! So inventory doesn't list the screen, buttons, icons, etc
  mode MODE_OFF,
  sms_from,
  sms_text,
  before [;
   Push, Touch:
    !if (self.mode == MODE_HOME) <<Push call_icon>>;
    "You'll have to be more specific.";
   Drop: if ((OnPhone()) && (telephone hasnt general)) "Don't be rude, you need to hang up first.";
  ],
  change_mode [new_mode o;
   ! Switching out of Text mode, clear existing conversation
   !if (self.mode == MODE_TEXT) {
   ! self.sms_from = nothing;
   ! self.sms_text = nothing;
   !}
   self.mode = new_mode;
   if (self.mode ~= MODE_OFF) self.interact();
   if (self.mode == MODE_HOME) {
    !self.&name-->0 = 'zarf';
    objectloop(o ofclass Icon or AI) {
     move o to screen;
    }
!    objectloop(o ofclass AI) {
!     move o to location;
!    }
   } else {
    !self.&name-->0 = 'phone';
    objectloop(o ofclass Icon or AI) {
     remove o;
    }
!    objectloop(o ofclass AI) {
!     remove o;
!    }
   }
   if (self.mode == MODE_CONTACTS) {
    objectloop(o ofclass Contact) {
     move o to screen;
    }
   } else {
    !self.&name-->0 = 'phone';
    objectloop(o ofclass Contact) {
     remove o;
    }
   }
   if (self.mode == MODE_GALLERY) {
    current_photo = MAX_PHOTOGRAPHS - Photograph.remaining();
   }
  ],
  interact [;
   self.move_counter = SMARTPHONE_TIMEOUT;
   #Ifdef DEBUG_PHONES; print "DEBUG interact smartphone.move_counter ", self.move_counter; new_line; #Endif;
   StartDaemon(self);
  ],
  move_counter,
  daemon [;
   if (call_person == nothing) {
    self.move_counter--;
    #Ifdef DEBUG_PHONES; print "DEBUG daemon smartphone.move_counter ", self.move_counter; new_line; #Endif;
    if (self.move_counter == 0) {
     print "My smartphone times out and turns off.^";
     self.change_mode(MODE_OFF);
     StopDaemon(self);
     !if (gg_grwin ~= nothing) glk_window_close(gg_grwin, 0);
     !gg_grwin = nothing;
    }
   } else {
    #Ifdef DEBUG_PHONES; print "DEBUG On smartphone call_person ", (name)call_person, "call_room ", (name)call_room; new_line; #Endif;
   }
  ]
 has container transparent;

Object screen "screen" smartphone
 with
  !name 'screen' 'display',
  description [ o;
   !glk_window_fill_rect(gg_grwin, $C0C0FF, 50, 45, 201, 355);
   !DrawTime(t0-->4, t0-->5);
   !DrawChar(48, 2, 1);
   !DrawChar(50, 2, 20);
   !DrawChar(51, 5, 1);
   !DrawChar(53, 5, 20);
   !DrawChar(54, 10, 1);
   !DrawChar(55, 10, 20);
   !DrawChar(56, 17, 1);
   !DrawChar(57, 17, 20);
   switch (parent(self).mode) {
    MODE_OFF: "It's off.";
    MODE_HOME: "It's got four icons, labelled Contacts, Text, Camera and Gallery.";
    ! ToDo: Contacts has Mom and Britney, and is for outgoing calls by name only
    MODE_CONTACTS:
     if (call_person == nothing) {
      print "Contacts:";
      objectloop (o ofclass Contact) {
       print "^ ", (name)o.contact_noun;
      }
      new_line;
      rtrue;
     } else "It has a picture of ", (name)call_person, " and a Hang Up button.";
    ! Text mode is "receive only"
    MODE_TEXT:
     ClearFlag(SMARTPHONE_LED_BLINKING);
     if ((smartphone.sms_from ~= nothing) && (smartphone.sms_text ~= nothing)) {
      if (smartphone.sms_from == anonymous) SetFlag(PLAYER_KNOWS_ABOUT_FLUFFY);
      "Text from ", (name)smartphone.sms_from, ": ~", (string)smartphone.sms_text, "~";
     }
     "Ready to send a text message.";
    MODE_CAMERA: "Ready to take a photo.";
    MODE_GALLERY:
     !if (Photograph.remaining() == MAX_PHOTOGRAPHS) "I haven't taken any photos yet.";
     !print "It shows the photo of ";
     objectloop(o ofclass Photograph) {
      if (o.number == current_photo) {
       <<Examine o>>;
      }
     }
     ".";
    default: "Shouldn't happen.";
   }
  ],
  before [;
   Push, Touch: "You'll have to be more specific.";
   Take: "That would be vandalism and you're not that kind of person, are you?";
  ]
 has container transparent;

Object home_button "button" smartphone
 with
  name 'home' 'button',
  before [;
   Push, Touch:
    switch (smartphone.mode) {
     MODE_OFF: print "I pressed the home button and entered my PIN.^";
     MODE_HOME: print "Nothing happens.^";
     default: print "Back to home screen.^";
    }
    smartphone.change_mode(MODE_HOME);
    rtrue;
   Take: "Taking Home button would be vandalism and you're not that kind of person, are you?";
  ];

! The icons have to be moved to the screen when in MODE_HOME, otherwise removed so you can't interact with them
Icon contacts_icon "contacts"
 with
  mode MODE_CONTACTS,
  name 'Contacts' 'icon';

Icon text_icon "text"
 with
  mode MODE_TEXT,
  name 'Text' 'icon';

Icon camera_icon "camera"
 with
  mode MODE_CAMERA,
  name 'Camera' 'icon';

Icon gallery_icon "gallery"
 with
  mode MODE_GALLERY,
  name 'Gallery' 'icon';

! Contacts
Contact contact_britney
 with
  contact_noun britney,
  name 'Britney',
  before [;
   Push, Touch:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(CONTACT_BRITNEY_BEFORE, actor, PUSH_ACTION, noun, second); #Endif;
  ];

Contact contact_mom
 with
  contact_noun mom,
  name 'Mom',
  before [;
   Push, Touch:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(CONTACT_MOM_BEFORE, actor, PUSH_ACTION, noun, second); #Endif;
  ];

AI google "Google"
 with name 'google';

AI siri "Siri"
 with name 'siri';

AI alexa "Alexa"
 with name 'alexa';

AI samantha "Samantha"
 with name 'samantha';

AI eliza "Eliza"
 with name 'eliza';

Girl britney "Britney"
 with
  name 'Britney',
  wearing_top blue_shirt,
  wearing_pants yoga_pants,
  bra b_bra,
  panties b_panties,
  destination_floor,
  destination_room, ! can be nothing if she's just looking around
  is_following false,
  contact_icon contact_britney,
  initial [;
   #Ifdef DEBUG_DAEMONS; print "DEBUG britney daemon stop^"; #Endif;
   StopDaemon(self);
   if (britney.is_following) rtrue;
   "I see Britney here.";
  ],
  description [ o n i;
   if (OnPhone(britney)) "Britney has a nice voice on the phone.";
   n = 0;
   objectloop(o ofclass Britney_Object) {
    if ((o in britney) && (o hasnt worn)) n++;
   }
   if (n > 0) {
    i = 0;
    objectloop(o ofclass Britney_Object) {
     if ((o in britney) && (o hasnt worn)) {
      switch (++i) {
       1: print "Britney's carrying ";
       default: if (i < n) print ", ";
        else print " and ";
      };
      print (the)o;
     }
    }
   } else print "Britney's a brunette, she's slim and athletic like me";
   print ", and she's wearing a ";
   if ((self.wearing_top ~= nothing) && (self.wearing_pants ~= nothing)) print_ret (name)self.wearing_top, " and ", (name)self.wearing_pants, ".";
   if ((self.wearing_top == nothing) && (self.wearing_pants ~= nothing)) "bra and ", (name)self.wearing_pants, ".";
   if ((self.wearing_top ~= nothing) && (self.wearing_pants == nothing)) print_ret (name)self.wearing_top, " and panties.";
   if ((self.wearing_top == nothing) && (self.wearing_pants == nothing)) "bra and panties.";
  ],
  before [;
   Give:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_BEFORE, actor, GIVE_ACTION, noun, second); #Endif;
    if (OnPhone(self)) "It'd be hard to give something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
   Show:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_BEFORE, actor, SHOW_ACTION, noun, second); #Endif;
    if (OnPhone(self)) "It's hard to show something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
  ],
  life [ o;
   Give:
    ! Giving to Britney...
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_LIFE, actor, GIVE_ACTION, noun, second); #Endif;
    if (noun ofclass Britney_Object) {
     move noun to britney;
     print_ret (BritneysVoice)"Thanks.";
    }
   Show:
    ! Showing to Britney...
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_LIFE, actor, SHOW_ACTION, noun, second); #Endif;
    ! if (call_person == self) "It's hard to show something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
    if (noun == smartphone) {
     if (smartphone.mode == MODE_GALLERY) {
      ! Find current photo
      objectloop(o ofclass Photograph) {
       if (o.number == current_photo) {
        switch (o.subject) {
         fluffy: print_ret (BritneysVoice)"Omigod, I love Fluffy, he's soo cute!";
         igor: print_ret (BritneysVoice)"Isn't that the guy from the front desk?";
         britney:
          print (BritneysVoice)"Oh, that's a pretty good photo of me";
          if ((o.wearing_top == nothing) || (o.wearing_pants == nothing)) print_ret (BritneysVoice)", but make sure you don't show that to anyone else!";
          else print_ret (BritneysVoice)".~";
         kaitlyn:
          print_ret (BritneysVoice)"That's an awesome photo of you!";
         computer:
          if (FlagOn(PLAYER_KNOWS_MESSAGE)) {
           SetFlag(BRITNEY_KNOWS_MESSAGE);
           print_ret (BritneysVoice)"We need to go there and find Fluffy!";
          }
         default: print_ret (BritneysVoice)"That's a nice photo.";
        }
        break;
       }
      }
     }
     if (smartphone.mode == MODE_TEXT) {
      if (smartphone.sms_from == anonymous) {
       if (FlagOff(BRITNEY_KNOWS_ABOUT_FLUFFY)) {
        SetFlag(BRITNEY_KNOWS_ABOUT_FLUFFY);
        print_ret (BritneysVoice)"Omigod, someone took Fluffy? What are we gonna do to get him back?";
       } print_ret (BritneysVoice)"I don't what else I can tell you to help.";
      } else print_ret (BritneysVoice)"Why are you showing me your text messages?";
     }
    print_ret (BritneysVoice)"Is that supposed to be interesting?";
   }
   Tell:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_LIFE, actor, TELL_ACTION, noun, second); #Endif;
    if (second == 'fluffy') {
     if (FlagOn(PLAYER_KNOWS_ABOUT_FLUFFY)) {
      if (FlagOff(BRITNEY_KNOWS_ABOUT_FLUFFY)) {
       print (BritneysVoice)"Omigod, that's awful, I'll go look around for clues";
       SetFlag(BRITNEY_KNOWS_ABOUT_FLUFFY);
       self.destination_floor = 1;
       self.destination_room = nothing;
       StartDaemon(self);
       if (OnPhone(britney)) {
        EndCall(britney);
        print_ret (BritneysVoice)", talk to you later.";
       } print_ret (BritneysVoice)".";
      } else "She says she'll continue looking.";
     } else print_ret (BritneysVoice)"OMG, Kaitlyn, I know you love your dog!";
    }
    "She doesn't seem interested.";
  ],
  orders [;
   Give:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, GIVE_ACTION, noun, second); #Endif;
   Drop:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, DROP_ACTION, noun, second); #Endif;
    if ((noun ofclass Britney_Object) && (noun in britney)) {
     if (OnPhone(britney)) {
      move noun to call_room;
     } else {
      move noun to location;
     }
     print_ret (BritneysVoice)"Ok.";
    }
   Take:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, TAKE_ACTION, noun, second); #Endif;
    if ((noun ofclass Britney_Object) && (noun notin britney)) {
     if (OnPhone(britney)) {
      if (noun in call_room) {
       move noun to britney;
       print_ret (BritneysVoice)"Ok.";
      }
     } else {
      if (noun in parent(britney)) {
       move noun to britney;
       print_ret (BritneysVoice)"Ok.";
      }
     }
    }
   Look:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, LOOK_ACTION, noun, second); #Endif;
    print_ret (BritneysVoice)"ToDo.";
   Disrobe:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, DISROBE_ACTION, noun, second); #Endif;
    if (~~(location ofclass Hotel_Room)) print_ret (BritneysVoice)"I can't undress in public!";
    if (noun ofclass Top) {
     DisrobeTop(actor, noun);
     rtrue;
    }
    if (noun ofclass Pants) {
     DisrobePants(actor, noun);
     rtrue;
    }
   Wear:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, WEAR_ACTION, noun, second); #Endif;
    if (noun ofclass Top) {
     WearTop(actor, noun);
     rtrue;
    }
    if (noun ofclass Pants) {
     WearPants(actor, noun);
     rtrue;
    }
   ComeHere:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, COME_HERE_ACTION, noun, second); #Endif;
    if (OnPhone(britney)) {
     if ((self.wearing_top == nothing) || (self.wearing_pants == nothing)) print_ret (BritneysVoice)"I'm not walking out of here dressed like this!";
     if (player in basement or roof) print_ret (BritneysVoice)"That's for authorized personnel only.";
     if (player in elevator) print_ret (BritneysVoice)"Let's meet somewhere other than the elevator.";
     !if (player in room1 or room2 or room3 or room4 or room5 or room6 or room7) "~Ok, stay there and I'll be there soon.~";
     if (parent(player) ofclass Hall or Hotel_Room) self.destination_floor = parent(player).floor_number;
     else self.destination_floor = 1;
     self.destination_room = location;
     !if (player in street) self.destination_on_route = lobby;
     !if (player in hall or room1 or room2 or room3 or room4 or room5 or room6 or room7) self.destination_on_route = hall;
     StartDaemon(self);
     EndCall(britney);
     print_ret (BritneysVoice)"Ok, I'll be there as soon as I can.";
    }
   ! ToDo GoTo
   FollowMe:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, FOLLOW_ME_ACTION, noun, second); #Endif;
    britney.is_following = true;
    print_ret (BritneysVoice)"Sure, I'll come with you.";
   StayHere:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(BRITNEY_ORDERS, actor, STAY_HERE_ACTION, noun, second); #Endif;
    britney.is_following = false;
    print_ret (BritneysVoice)"Ok, I'll stay here.";
   NotUnderstood: print_ret (BritneysVoice)"I don't understand.";
  ],
  daemon [ to_room;
   #Ifdef DEBUG_DAEMONS;
    print "DEBUG britney daemon start parent ", (name)parent(self), " destination floor ", self.destination_floor, " destination room ", (name)self.destination_room, ".^";
   #Endif;
   to_room = nothing;
   switch (parent(self)) {
    room_501, room_502, room_503, room_504, room_505, room_506, room_507:
     to_room = fifth_floor;
    fifth_floor:
     if (self.destination_floor < 5) to_room = fourth_floor;
     else to_room = self.destination_room;
    room_401, room_402, room_403, room_404, room_405, room_406, room_407:
     to_room = fourth_floor;
    fourth_floor:
     if (self.destination_floor < 4) to_room = third_floor;
     else {
      if (self.destination_floor > 4) to_room = fifth_floor;
      else to_room = self.destination_room;
     }
    room_301, room_302, room_303, room_304, room_305, room_306, room_307:
     to_room = third_floor;
    third_floor:
     if (self.destination_floor < 3) to_room = second_floor;
     else {
      if (self.destination_floor > 3) to_room = fourth_floor;
      else to_room = self.destination_room;
     }
    room_201, room_202, room_203, room_204, room_205, room_206, room_207:
     to_room = second_floor;
    second_floor:
     if (self.destination_floor < 2) to_room = elevator_vestibule;
     else {
      if (self.destination_floor > 2) to_room = third_floor;
      else to_room = self.destination_room;
     }
    elevator_vestibule:
     if (self.destination_floor > 1) {
      to_room = second_floor;
     } else {
      if (self.destination_room == nothing) to_room = random(lobby, gift_shop, casino, restaurant, nightclub);
      else {
       if (self.destination_room == street) to_room = lobby;
       else to_room = self.destination_room;
      }
     }
    lobby:
     if (self.destination_room == nothing) to_room = random(gift_shop, elevator_vestibule);
     else {
      if (self.destination_room == street) to_room = street;
      else to_room = elevator_vestibule;
     }
    gift_shop:
     if (self.destination_room == nothing) to_room = random(lobby, elevator_vestibule, casino);
     else to_room = elevator_vestibule;
    casino:
     if (self.destination_room == nothing) to_room = random(gift_shop, elevator_vestibule, restaurant);
     else to_room = elevator_vestibule;
    restaurant:
     if (self.destination_room == nothing) to_room = random(casino, elevator_vestibule, nightclub);
     else to_room = elevator_vestibule;
    nightclub:
     if (self.destination_room == nothing) to_room = random(restaurant, elevator_vestibule);
     else to_room = elevator_vestibule;
    street: to_room = lobby;
    default: print "Britney doesn't even know where she is!^";
   }
   #Ifdef DEBUG_DAEMONS; print "DEBUG britney daemon to_room ", to_room; new_line; #Endif;
   if (to_room ~= nothing) {
    move self to to_room;
    if (player in to_room) {
     self.destination_room = to_room;
     ! ToDo Knock, but you have to let her in
     if (parent(player) ofclass Hotel_Room) print "I heard a knock on the door and let Britney in.";
     else print "^Just then, Britney arrived.";
    }
    if (parent(self) == self.destination_room) {
     #Ifdef DEBUG_DAEMONS; print "DEBUG britney daemon stop^"; #Endif;
     StopDaemon(self);
    }
   }
   #Ifdef DEBUG_DAEMONS; print "DEBUG britney daemon end parent ", (name)parent(self); new_line; #Endif;
  ];

Room_Key b_key "room key" britney
 class Britney_Object
 with
  name 'room' 'key',
  description "It has the hotel's logo, but no room number.",
  article "Britney's";

! Clothes that Britney's wearing
Top blue_shirt "blue t-shirt" britney
 with
  name 'blue' 'shirt' 'top' 't-shirt',
  article "Britney's"
 has worn;

Pants yoga_pants "yoga pants" britney
 with
  name 'yoga' 'pants',
  article "Britney's"
 has worn pluralname;

! Clothes that is initially hidden
Underwear b_bra "bra"
 with
  name 'bra',
  article "Britney's"
 has ~worn;

Underwear b_panties "panties"
 with
  name 'panties',
  article "Britney's"
 has ~worn pluralname;

! Igor's in the lobby
Guy igor "Igor" lobby
 with
  name 'Igor',
  initial [;
   print "The man behind the front desk says, ~Welcome to the Timbuktu Resort and Casino!~";
   if(location hasnt visited) " While I was checking in, I chatted with him and found out his name is Igor and he's Ukrainian.";
   new_line;
   rtrue;
  ],
  description [;
   if (OnPhone(self)) "Over the phone, you notice his accent more.";
   "He's wearing a hotel uniform.";
  ],
  before [;
   Give:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_BEFORE, actor, GIVE_ACTION, noun, second); #Endif;
    if (OnPhone(self)) "It'd be hard to give ", (name)self, " something when I'm on the phone with ", (PronounAcc)self, "!";
   Show:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_BEFORE, actor, SHOW_ACTION, noun, second); #Endif;
    if (OnPhone(self)) "It's hard to show something to ", (name)self, " when I'm on the phone with ", (PronounAcc)self, "!";
  ],
  life [ o;
   Give:
    ! Giving to Igor...
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_LIFE, actor, GIVE_ACTION, noun, second); #Endif;
    if (noun == master_key) {
     move noun to igor;
     print_ret (IgorsVoice)"Thanks for getting that back to me!";
    }
    print_ret (IgorsVoice)"No, thanks, I don't need that.";
   Show:
    ! Showing to Igor...
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_LIFE, actor, SHOW_ACTION, noun, second); #Endif;
    if (noun == smartphone) {
     if (smartphone.mode == MODE_GALLERY) {
      ! Find current photo
      objectloop(o ofclass Photograph) {
       if (o.number == current_photo) {
        switch (o.subject) {
         fluffy: print_ret (IgorsVoice)"Oh, that's your dog? He's really cute!";
         igor: print_ret (IgorsVoice)"I look ok in that picture.";
         britney: print_ret (IgorsVoice)"Yes, that's your friend, how could I forget her?";
         kaitlyn:
          print (IgorsVoice)"That's an awesome photo of you";
          if ((o.wearing_top == nothing) || (o.wearing_pants == nothing)) print_ret (IgorsVoice)", but you shouldn't be showing that to me.";
          else print_ret (IgorsVoice)".~";
         computer:
          SetFlag(PLAYER_KNOWS_MESSAGE);
          print_ret (IgorsVoice)"Oh, that's Russian, it means, ~Vlad, the dog's in the basement.~";
         default: print_ret (IgorsVoice)"That's a nice photo.";
        }
        break;
       }
      }
     }
     if (smartphone.mode == MODE_TEXT) {
      if (smartphone.sms_from == anonymous) {
       if (FlagOff(IGOR_KNOWS_ABOUT_FLUFFY)) {
        SetFlag(IGOR_KNOWS_ABOUT_FLUFFY);
        print_ret (IgorsVoice)"Oh no, someone took your dog? If there's anything I can do to help, let me know.";
       } print_ret (IgorsVoice)"I don't what else I can tell you to help.";
      } else print_ret (IgorsVoice)"Why are you showing me your text messages?";
     }
    print_ret (IgorsVoice)"Is that supposed to be interesting?";
   }
   Ask:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_LIFE, actor, ASK_ACTION, noun, second); #Endif;
    if (second == 'russians' or 'vlad' or 'vladimir') {
     if (FlagOff(IGOR_HAS_REVEALED_407)) {
      print "I asked him if he knew anything about ";
      if (second == 'russians') print "any Russians";
      else print "someone named Vlad or Vladimir";
      print ", he said he ";
      if (FlagOn(IGOR_KNOWS_ABOUT_FLUFFY)) {
       SetFlag(IGOR_HAS_REVEALED_407);
       "could get in trouble for telling me this, but there are two big Russian guys named Vladimir and Sergei in room 407.";
      } else "can't talk about guests.";
     } else {
      if (FlagOff(IGOR_HAS_HINTED_KEY)) {
       SetFlag(IGOR_HAS_HINTED_KEY);
       print_ret (IgorsVoice)"I'll *really* get in trouble for this, but if you had a master key, maybe you could find something in their room.";
      } else "He said he didn't know anything else about Russians that could help me.";
     }
    }
    "Igor didn't seem to know anything about ", second, ".";
   Tell:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_LIFE, actor, TELL_ACTION, noun, second); #Endif;
    if (second == 'fluffy') {
     if (FlagOn(PLAYER_KNOWS_ABOUT_FLUFFY)) {
      if (FlagOff(IGOR_KNOWS_ABOUT_FLUFFY)) {
       SetFlag(IGOR_KNOWS_ABOUT_FLUFFY);
       "I tell Igor that Fluffy's been kidnapped, he's very concerned and says he'll do whatever he can to help.";
      } print_ret (IgorsVoice)"So no news, then?";
     } "I tell Igor that I'm here with Fluffy to compete in a dog show, he wishes me good luck.";
    }
    "He doesn't seem interested.";
  ],
  orders [;
   ComeHere:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_ORDERS, actor, COME_HERE_ACTION, noun, second); #Endif;
    if (OnPhone(igor)) print_ret (IgorsVoice)"~I need to stay here, sorry.~";
   FollowMe:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_ORDERS, actor, FOLLOW_ME_ACTION, noun, second); #Endif;
    if (~~(OnPhone(igor))) print_ret (IgorsVoice)"~I need to stay here, sorry.~";
   StayHere:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_ORDERS, actor, STAY_HERE_ACTION, noun, second); #Endif;
    print_ret (IgorsVoice)"~Of course, I have to stay here.~";
   Give:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_ORDERS, actor, GIVE_ACTION, noun, second); #Endif;
    !if (call_person == self) "It'd be hard for ", (name)self, " to give you anything when I'm on the phone with ", (PronounAcc)self, "!";
    if ((noun in self) && (noun == master_key) && (second == player)) {
     if (FlagOn(IGOR_HAS_REVEALED_407)) {
      move noun to second;
      print_ret (IgorsVoice)"Well, you really need to get your dog back, here you go.";
     } else print_ret (IgorsVoice)"Sorry, I'd get in big trouble if I did that.";
    }
   Take:
    #Ifdef DEBUG_TRACEACTIONS; TraceActions(IGOR_ORDERS, actor, TAKE_ACTION, noun, second); #Endif;
    if (noun == master_key) {
     move noun to igor;
     print_ret (IgorsVoice)"I sure am glad to get that back!";
    }
    print_ret (IgorsVoice)"No, thanks, I don't need that.";
   NotUnderstood: print_ret (IgorsVoice)"I don't understand.";
  ];

! Igor has the master key
Disappearing_Object master_key "master key" igor
 class Britney_Object
 with
  name 'master' 'key',
  description "It has the hotel's logo, but no room number.",
  article "Igor's";

! Objects in hotel rooms
Top pink_shirt "pink shirt"
 with
  name 'pink' 'shirt' 'top' 't-shirt',
  article "my"
 has ~worn;

Top green_shirt "green t-shirt"
 with
  name 'green' 'shirt' 'top' 't-shirt',
  article "Britney's"
 has ~worn;

General_Object computer "computer" room_407
 with
  name 'computer',
  initial "There's a computer here and it's on!",
  description [;
   SetFlag(PLAYER_HAS_SEEN_MESSAGE);
   print "There's something on the computer that I can't understand! It reads: ~";
   print (char)ucVe, (char)lcEl, (char)lcA, (char)lcDe, ", ", (char)lcShch, (char)lcYe, (char)lcEn, (char)lcO, (char)lcKa;
   print " ", (char)lcVe, " ", (char)lcPe, (char)lcO, (char)lcDe, (char)lcVe, (char)lcA, (char)lcEl, (char)lcYe, "~.^";
  ]
 has static;

Object fluffy "Fluffy" thedark;

! SMS thread with Vladimir Putkin
Guy anonymous "Anonymous" thedark
 with
  name 'anonymous';

Girl mom "Mom" thedark
 with
  name 'Mom',
  contact_icon contact_mom;
